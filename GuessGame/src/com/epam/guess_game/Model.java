package com.epam.guess_game;

import java.util.ArrayList;

/**
 * Created by Asus on 23.04.2016.
 */
public class Model {
    /** Number of guesses */
    private static int guessNum = 0;

    /** List of all guesses, except ones in wrong format */
    private ArrayList<String> stats;

    /** Number generated by program */
    private int secretNum;

    /* Boundaries */
    private int lowerBoundary;
    private int upperBoundary;

    /* Constructor */
    public Model() {
        stats = new ArrayList<>();
    }

    // The Program logic

    /**
     * Returns a pseudo-random number between min and max, exclusive.
     *
     * @param min Minimum value
     * @param max Maximum value. Must be greater than min.
     * @return Integer between min and max, exclusive.
     */
    public int rand(int min, int max) {
        return min + 1 + (int)(Math.random() * (max - min - 1));
    }

    /**
     * Method to test rand method.
     *
     * @param min Minimum value.
     * @param max Maximum value.
     * @param multiplier
     * @return
     */
    public int randTestBoundaries(int min, int max, double multiplier) {
        return min + 1 + (int)(multiplier * (max - min - 1));
    }

    /**
     * Returns an integer value that indicates whether guessed number
     * is equal, less or bigger than one generated by program.
     *
     * @param guess Number guessed by user.
     * @return 1, if guess is bigger, -1 if guess is less and 0 if guess equals generated number.
     */
    public int checkNum(int guess) {
        guessNum++;
        stats.add(String.valueOf(guess));

        if (guess > secretNum) {
            upperBoundary = guess;
            return 1;
        } else if (guess < secretNum) {
            lowerBoundary = guess;
            return -1;
        } else { //guess == secretNum
            return 0;
        }
    }

    public ArrayList<String> getStats() {
        return stats;
    }

    public int getGuessNum() {
        return guessNum;
    }

    public int getLowerBoundary() {
        return lowerBoundary;
    }

    public int getUpperBoundary() {
        return upperBoundary;
    }

    public void setSecretNum() {
        secretNum = rand(lowerBoundary, upperBoundary);
    }

    public void setSecretNum(int num) {
        secretNum = num;
    }

    /**
     * Sets lower and upper boundaries, while checking their values.
     *
     * @param min Lower boundary.
     * @param max Upper boundary.
     * @throws IndexOutOfBoundsException if boundaries are incorrect.
     */
    public void setBoundaries(int min, int max) throws IndexOutOfBoundsException {
        if (checkBoundaries(min, max)) {
            lowerBoundary = min;
            upperBoundary = max;
        } else {
            throw new IndexOutOfBoundsException();
        }
    }

    /**
     * Checks if lower boundary is less by at least 2 than upper one, so there will be at least
     * two numbers between them.
     *
     * @param min Lower boundary.
     * @param max Upper boundary.
     * @return boolean.
     */
    private boolean checkBoundaries(int min, int max) {
        return (min < max - 2);
    }
}
